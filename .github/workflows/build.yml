name: Lint, test and build

on:
  push:
    branches:
    - main
    - develop
  pull_request:
    branches:
    - main
    - develop

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Check formatting
      run: cargo fmt --all -- --check
    - name: Run clippy
      run: cargo clippy --all-targets --all-features

  test:
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-15, windows-2025]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xclip wl-clipboard
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose
    - name: Run tests with all features
      run: cargo test --all-features --verbose
    - name: Generate coverage (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cargo install cargo-tarpaulin
        cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        file: ./cobertura.xml
        flags: unittests

  build-binary:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: ubuntu-24.04
          target: x86_64-unknown-linux-gnu
          artifact_name: catnip
          asset_name: catnip-linux-x86_64
        - os: ubuntu-24.04-arm
          target: aarch64-unknown-linux-gnu
          artifact_name: catnip
          asset_name: catnip-linux-aarch64
        - os: macos-15
          target: x86_64-apple-darwin
          artifact_name: catnip
          asset_name: catnip-macos-x86_64
        - os: macos-15
          target: aarch64-apple-darwin
          artifact_name: catnip
          asset_name: catnip-macos-aarch64
        - os: windows-2025
          target: x86_64-pc-windows-msvc
          artifact_name: catnip.exe
          asset_name: catnip-windows-x86_64.exe
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    - name: Build binary
      run: cargo build --target ${{ matrix.target }}
    - name: Upload binary as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ./target/${{ matrix.target }}/debug/${{ matrix.artifact_name }}
